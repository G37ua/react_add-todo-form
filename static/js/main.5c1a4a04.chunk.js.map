{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoForm/TodoForm.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","usersFromServer","find","TodoList","todos","map","maxId","Math","max","TodoForm","users","onAddTodo","useState","setTitle","selectedUser","setSelectedUser","userError","setUserError","titleError","setTitleError","validateForm","valid","trim","length","action","method","onSubmit","e","preventDefault","parseInt","type","placeholder","value","onChange","cleanedInput","target","replace","match","onBlur","required","selectedValue","disabled","onClick","App","todosFromServer","setTodos","newTodo","prevTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c1a4a04.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { Todo } from '../components/Interfaces';\n\nexport default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n] as Todo[];\n","import React from 'react';\nimport { User } from '../Interfaces';\n\nimport './UserInfo.scss';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport { UserInfo } from '../UserInfo';\nimport { Todo, User } from '../Interfaces';\nimport usersFromServer from '../../api/users';\n\nimport './TodoInfo.scss';\n\ninterface Props {\n  todo: Todo;\n}\n\nconst userById = (userId: number): User | undefined => {\n  return usersFromServer.find(user => user.id === userId);\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const user = userById(todo.userId);\n\n  return (\n    <article\n      key={todo.id}\n      data-id={todo.id}\n      className={`TodoInfo${todo.completed ? ' TodoInfo--completed' : ''}`}\n    >\n      <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n      { user && (\n        <UserInfo\n          user={user}\n        />\n      )}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../Interfaces';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","import React, { useState, FormEvent } from 'react';\nimport { Todo, User } from '../Interfaces';\n// import todos from '../../api/todos';\n\ninterface Props {\n  users: User[];\n  todos: Todo[];\n  onAddTodo: (newTodo: Todo) => void;\n}\n\nconst maxId = (todos: Todo[]) => {\n  return Math.max(...todos.map((todo) => todo.id || 0)) + 1;\n};\n\nexport const TodoForm: React.FC<Props> = ({ users, todos, onAddTodo }) => {\n  const [title, setTitle] = useState<string>('');\n  const [selectedUser, setSelectedUser] = useState<string>('');\n  const [userError, setUserError] = useState<string>('');\n  const [titleError, setTitleError] = useState<string>('');\n\n  const validateForm = () => {\n    let valid = true;\n\n    if (title.trim().length < 1) {\n      setTitleError('Please enter a title');\n      valid = false;\n    } else {\n      setTitleError('');\n    }\n\n    if (!selectedUser) {\n      setUserError('Please choose a user');\n      valid = false;\n    } else {\n      setUserError('');\n    }\n\n    return valid;\n  };\n\n  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    const cleanedInput = inputValue.replace(\n      /[ыЫъЪэЭёЁ]/g, (match) => {\n        switch (match) {\n          case 'ы': return 'і';\n          case 'Ы': return 'І';\n          case 'ъ': return 'ї';\n          case 'Ъ': return 'Ї';\n          case 'э': return 'є';\n          case 'Э': return 'Є';\n          case 'ё':\n          case 'Ё':\n            return \"'\";\n          default:\n            return match;\n        }\n      },\n    );\n\n    setTitle(cleanedInput);\n\n    if (cleanedInput.trim().length > 0) {\n      setTitleError('');\n    }\n  };\n\n  const handleUserChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = e.target.value;\n\n    setSelectedUser(selectedValue);\n\n    if (selectedValue) {\n      setUserError('');\n    }\n  };\n\n  const handleTitleBlur = () => {\n    validateForm();\n  };\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n\n    if (validateForm()) {\n      onAddTodo(\n        {\n          id: maxId(todos),\n          title,\n          userId: parseInt(selectedUser, 10),\n          completed: false,\n        },\n      );\n\n      setTitle('');\n      setSelectedUser('');\n    }\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          placeholder=\"title\"\n          value={title}\n          onChange={handleTitleChange}\n          onBlur={handleTitleBlur}\n          required\n        />\n        <span className=\"error\">{titleError}</span>\n      </div>\n\n      <div className=\"field\">\n        <select\n          value={selectedUser}\n          onChange={handleUserChange}\n          data-cy=\"userSelect\"\n          required\n        >\n          <option value=\"\" disabled>\n            Choose a user\n          </option>\n          {users.map((user) => (\n            <option key={user.id} value={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n        <span className=\"error\">{userError}</span>\n      </div>\n\n      <button\n        type=\"submit\"\n        data-cy=\"submitButton\"\n        onClick={validateForm}\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/TodoForm/TodoForm';\nimport { Todo } from './components/Interfaces';\n\nimport './App.scss';\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(todosFromServer);\n\n  const handleAddTodo = (newTodo: Todo) => {\n    setTodos(prevTodos => [...prevTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm\n        users={usersFromServer}\n        onAddTodo={handleAddTodo}\n        todos={todos}\n      />\n\n      <TodoList\n        todos={todos}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}